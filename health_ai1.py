# -*- coding: utf-8 -*-
"""health ai

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RCRR9d7yMPjmZfLNefoaMsNj63wCAve3
"""

!pip install gradio transformers accelerate gtts

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from gtts import gTTS
import os

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# --- Disease Prediction ---
def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor.\n\nSymptoms: {symptoms}\n\nAnalysis:"
    response_text = generate_response(prompt, max_length=1200)

    # Generate speech with gTTS
    try:
        tts = gTTS(text=response_text, lang="en")
        tts.save("doctor_voice.mp3")
        audio_out = "doctor_voice.mp3"
    except Exception as e:
        response_text += f"\n(Note: Voice generation failed: {str(e)})"
        audio_out = None

    return response_text, audio_out

# --- Treatment Plan ---
def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information:\nCondition: {condition}\nAge: {age}\nGender: {gender}\nHistory: {medical_history}\n\nTreatment Plan:"
    response_text = generate_response(prompt, max_length=1200)

    # Generate speech with gTTS
    try:
        tts = gTTS(text=response_text, lang="en")
        tts.save("treatment_voice.mp3")
        audio_out = "treatment_voice.mp3"
    except Exception as e:
        response_text += f"\n(Note: Voice generation failed: {str(e)})"
        audio_out = None

    return response_text, audio_out

# --- Gradio App ---
with gr.Blocks() as app:
    gr.Markdown("# ü©∫ Medical AI Assistant with Voice")
    gr.Markdown("‚ö†Ô∏è **Disclaimer:** This is for informational purposes only. Always consult healthcare professionals.")

    with gr.Tabs():
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Describe your symptoms (or type below)",
                        placeholder="e.g., fever, headache, cough...",
                        lines=4
                    )
                    predict_btn = gr.Button("üîç Analyze Symptoms")
                with gr.Column():
                    prediction_output = gr.Textbox(label="AI Response", lines=15)
                    prediction_audio = gr.Audio(label="Doctor Voice", type="filepath")

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=[prediction_output, prediction_audio])

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(label="Condition", placeholder="e.g., diabetes, migraine")
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(choices=["Male", "Female", "Other"], label="Gender", value="Male")
                    history_input = gr.Textbox(label="Medical History", placeholder="Previous conditions, allergies, etc.")
                    plan_btn = gr.Button("üìù Generate Treatment Plan")
                with gr.Column():
                    plan_output = gr.Textbox(label="AI Treatment Plan", lines=15)
                    plan_audio = gr.Audio(label="Doctor Voice", type="filepath")

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=[plan_output, plan_audio])

app.launch(share=True)